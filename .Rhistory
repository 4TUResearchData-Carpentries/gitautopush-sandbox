install.packages("tidyverse")
print("who")
setwd("~/tudelft/staff-umbrella/3mEDataStewardship/training/dmp-phd-training/course")
library(lubridate)
library(dplyr)
library(stringr)
library(purrr)
library(readr)
library(readxl)
#library(readODS)
source("scripts/certificate-functions.R")
# arguments to edit
session_date <- as.Date("2023-08-25")
#data <- read_csv("part-3/sessions/2023-04-20_1552_3me-dmp-part3.csv") # csv file from Brightspace grade export
data_main <- read_xlsx("3mE_PhD-DMP-training_students_from_Sep-2022.xlsx")
session_names <- data_main |>
filter(
part_3 == session_date
)
stopifnot(nrow(session_names) > 0)
# Render the certificates
render_docs(session_names = session_names, session_date = session_date, out_format = "html")
# Render the certificates
render_docs(session_names = session_names, session_date = session_date, out_format = "html")
pagedown::find_chrome()
setwd("~/tudelft/staff-umbrella/3mEDataStewardship/requests/dmp-feedback")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
#issue_number <- 119
path_to_log <- "request-log.csv"
request_log
request_log <- read_csv(path_to_log)
library(readr)
library(dplyr)
request_log <- read_csv(path_to_log)
install.packages(
c(
"./scripts/dmpfeedback_0.0.0.9000.tar.gz"
#"./scripts/datastewardr_0.0.0.9000.tar.gz",
#"./scripts/datastewardrDEV_0.0.0.9000.tar.gz"
),
repos = NULL,
dependencies = "Imports",
type = "source"
)
issue_number <- 193
resp <- dmpfeedback:::request_gh_issue(issue_number = issue_number)
usethis::edit_r_environ()
devtools::install_github("bbartholdy/datastewardr")
datastewardr:::set_env_var()
issue_number <- 193
#issue_number <- 193 # for testing purposes
path_to_log <- "request-log.csv"
request_log <- read_csv(path_to_log)
library(stringr)
library(readr)
library(dplyr)
request_log <- read_csv(path_to_log)
resp <- dmpfeedback:::request_gh_issue(issue_number = issue_number)
resp_content <- httr2::resp_body_json(resp)
resp_content$comments
resp_content$comments_url
match_requests <- request_log |>
filter(
name == contact_name,
type == request_type
)
issue_body <- resp_content$body
#contact_name <- str_extract(issue_body, "(?<=Contact name:\\*\\*\\s)(.*)")
contact_name_extract <- str_extract(issue_body, "(?<=Contact name:).*")
contact_name_clean <- str_trim(contact_name_extract)
contact_name <- str_remove(contact_name_clean, "[\\*]+")
#request_type <- str_extract(issue_body, "(?<=Request type:\\*\\*\\s)(.*)")
request_type_extract <- str_extract(issue_body, "(?<=Request type:).*")
request_type_trim <- str_remove(request_type_extract, "[\\*]+")
request_type <- str_trim(request_type_trim)
log_entry <- list(
"contact_name" = contact_name,
"date_received" = NA
)
match_requests <- request_log |>
filter(
name == contact_name,
type == request_type
)
match_requests
resp_content$comments <- gh_comment
gh_comment <- "test comment"
resp_content$comments <- gh_comment
exists(gh_comment)
gh_comment
?exists
exists("gh_comment")
exists("req_issue")
resp_content$comments
dmpfeedback:::request_gh_issue(updated_issue, issue_number = issue_number)
updated_issue <- resp_content
updated_issue$comments <- gh_comment
dmpfeedback:::request_gh_issue(updated_issue, issue_number = issue_number)
gh_comment <- list(
"body" = paste0("This issue may be related to a previous issue (issue number was not documented).")
)
gh_comment
updated_issue$comments <- gh_comment
updated_issue
updated_issue$comments
dmpfeedback:::request_gh_issue(updated_issue, issue_number = issue_number)
dmpfeedback:::github_base_url()
dmpfeedback:::github_base_url("issues")
dmpfeedback:::github_repo("3mE-Data-Stewards/3me-requests")
dmpfeedback:::github_repo("3mE-Data-Stewards", "3me-requests")
dmpfeedback:::github_api
dmpfeedback:::github_api("3mE-Data-Stewards/3me-requests/issues/193/comments", request_body = gh_comment)
dmpfeedback:::github_auth()
dmpfeedback:::github_api("3mE-Data-Stewards/3me-requests/issues/193/comments", token = token, request_body = gh_comment)
token <- dmpfeedback:::github_auth()
dmpfeedback:::github_api("3mE-Data-Stewards/3me-requests/issues/193/comments", token = token, request_body = gh_comment)
dmpfeedback:::github_api("/3mE-Data-Stewards/3me-requests/issues/193/comments", token = token, request_body = gh_comment)
dmpfeedback:::github_api("/repos/3mE-Data-Stewards/3me-requests/issues/193/comments", token = token, request_body = gh_comment)
dmpfeedback:::github_api
request_url <- "https://api.github.com/repos/3mE-Data-Stewards/3me-requests/issues/193/comments"
req <- request(request_url) %>% req_method("POST") %>%
req_headers(Accept = "application/vnd.github+json") %>%
req_auth_bearer_token(token)
library(httr2)
req <- request(request_url) %>% req_method("POST") %>%
req_headers(Accept = "application/vnd.github+json") %>%
req_auth_bearer_token(token)
require(package)
req
req <- request(request_url) %>% req_method("POST") %>%
req_headers(Accept = "application/vnd.github+json") %>%
req_auth_bearer_token(token) %>%
req_body_json(gh_comment)
req_perform(req, mock = T)
?req_perform
req_dry_run(req)
req_perform(req)
dmpfeedback:::github_base_url()
dmpfeedback:::github_base_url("path")
install.packages("tidyverse")
library(tidyverse)
library(readxl)
library(glue)
email_invite <- function(email_list, subject, body, w2m_link){
email_body_content <- glue(body)
contact_email <- paste(email_list, collapse = ";")
email_body_newline <- gsub("\n", "%0D%0A", paste(email_body_content))
email_body_spaces <- gsub(" ", "%20", paste(email_body_newline))
email_body_spaces2 <- gsub("\r", "%20", paste(email_body_spaces))
email_body_colon <- gsub(":", "%3A", paste(email_body_spaces2))
email_body_slash <- gsub("/", "%2F", paste(email_body_spaces2))
email_body_qm <- gsub("\\?", "%3F", paste(email_body_spaces2))
email_body <- gsub("\\,", "%2C", paste(email_body_spaces2))
email_subject_formatted <- gsub(" ", "%20", email_subject)
cli_command <- glue(
'start Outlook.exe /c ipm.note /m "?bcc={contact_email}&subject={email_subject_formatted}&body={email_body}"',
)
#print(cli_command) # for debugging
shell(cli_command)
}
invite_body <- read_lines("part-3/02_email-invite")
setwd("~/tudelft/staff-umbrella/3mEDataStewardship/training/dmp-phd-training/course/scripts")
phd_data_gs <- read_xlsx("3mE_PhD-DMP-training_students_from_Sep-2022.xlsx")
setwd("~/tudelft/staff-umbrella/3mEDataStewardship/training/dmp-phd-training/course")
phd_data_gs <- read_xlsx("3mE_PhD-DMP-training_students_from_Sep-2022.xlsx")
# get emails of students who have participated in Part 1 but not Part 3
part3_phd_invite <- phd_data_gs %>%
filter(
is.na(part_3) &
!is.na(part_1)
) %>%
#.$email %>%
select(email) %>%
write_tsv("phd-to-invite.tsv")
invite_body <- read_lines("part-3/02_email-invite")
invite_body <- paste0(invite_body, collapse = "\n")
email_subject <- "DMP training Part 3 sessions"
email_invite(part3_phd_invite$email, email_subject, invite_body)
part3_phd_invite$email
write_csv(part3_phd_invite$email, "2023-09-29_invite-to-part3.csv")
write_csv(select(part3_phd_invite, email), "2023-09-29_invite-to-part3.csv", col_names = F)
osVersion
email_invite <- function(email_list, subject, body, w2m_link){
email_body_content <- glue(body)
contact_email <- paste(email_list, collapse = ";")
email_body_newline <- gsub("\n", "%0D%0A", paste(email_body_content))
email_body_spaces <- gsub(" ", "%20", paste(email_body_newline))
email_body_spaces2 <- gsub("\r", "%20", paste(email_body_spaces))
email_body_colon <- gsub(":", "%3A", paste(email_body_spaces2))
email_body_slash <- gsub("/", "%2F", paste(email_body_spaces2))
email_body_qm <- gsub("\\?", "%3F", paste(email_body_spaces2))
email_body <- gsub("\\,", "%2C", paste(email_body_spaces2))
email_subject_formatted <- gsub(" ", "%20", email_subject)
detect_os <- osVersion
if(str_detect(detect_os, "Windows")){
cli_command <- glue(
'start Outlook.exe /c ipm.note /m "?bcc={contact_email}&subject={email_subject_formatted}&body={email_body}"',
)
#print(cli_command) # for debugging
shell(cli_command)
} else {
cli_command <- glue(
'thunderbird -compose "bcc={contact_email},subject={email_subject_formatted},body={email_body}"'
)
}
print(cli_command)
#cli::cli(cli_command)
}
invite_body <- read_lines("part-3/02_email-invite")
invite_body <- paste0(invite_body, collapse = "\n")
email_subject <- "DMP training Part 3 sessions"
email_invite(part3_phd_invite$email, email_subject, invite_body)
invite_body
enquo(invite_body)
invite_body
setwd("~/ownCloud/tudelft/carpentries/workshops/2023-10-12_DC-ldev/workshop_notes")
year_fct <- factor(c(1990, 1983, 1977, 1998, 1990))
as.numeric(levels(year_fct))[year_fct]
levels(years_fct)
levels(year_fct)
as.numeric(levels(year_fct))
as.numeric(levels(year_fct))[year_fct]
