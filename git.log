# FIND A CONVENIENT PLACE TO WORK

echo ~
cd Desktop
mkdir 2311-SWC-TUD
cd 2311-SWC-TUD
pwd

# INSTALL SSH KEYS AND TEST ENCRYPTED CONNECTION

ssh -T git@github.com   # check if you can already connect
ls ~/.ssh               # check if you already have the key-files
ssh-keygen -t ed25519 -C 'address@example.com'  # create key pair
ls ~/.ssh
cat ~/.ssh/id_ed25519.pub
eval "$(ssh-agent -s)"          # for Windows users
ssh-add ~/.ssh/id_ed25519       # for Windows users (re private key)
clip < ~/.ssh/id_ed25519.pub    # copy PUBLIC key to clipboard
# browswer: paste PUBLIC key on the GitHub account
ssh -T git@github.com       # test connection

# STARTING WITH GIT

git 
git --help
ls
ls -a
git init
ls -a
ls .git

# CONFIGURE GIT

git config --global --list
git config --global user.name "Giordano Lipari @laptop4"
git config --global user.email "wmotion.eu@gmail.com"
git config --global --list
git config --global core.editor "nano"
git config --global core.autocrlf true # windows
git config --global core.autocrlf input  # linux/input
git config --global --list

# CREATE A FILE AND DO THE GIT ROUTINE

git status
nano count_lines.py
ls
cat count_lines.py 
git status 
git add count_lines.py
git status 
git commit -m "Add count_lines.py" count_lines.py 
git status 
git log
git log --oneline

# EDIT THE SAME FILE AND COMMIT AGAIN

nano count_lines.py     # add docstrings (explanation at the top; describe only the input)
cat count_lines.py 
git status
git diff
git add count_lines.py 
git status 
git diff
git log
git commit count_lines.py  # add extended message with text editor
git log
git log --oneline
cat count_lines.py 

# EXPLAIN THE `HEAD` POINTER

git log
git log --oneline
git diff
git diff HEAD
git diff HEAD~1
git diff HEAD~2
git diff 4ea15  # this is the commit name of HEAD
git diff 4725f  # this is the commit name of HEAD~1

# EDIT WITH A MISTAKE AND RETRIEVE A VERSION FROM THE HISTORY

git log --oneline
nano count_lines.py     # add an ill-conceived line
cat count_lines.py 
git status
git checkout HEAD count_lines.py
cat count_lines.py 
git status 
git checkout HEAD~1 count_lines.py
cat count_lines.py 
git checkout HEAD count_lines.py  # return to last committed version
cat count_lines.py 

# INSPECT CHANGES IN THE HISTORY

nano count_lines.py     # add info about output
cat count_lines.py 
git status 
git diff
git add count_lines.py 
git status 
git diff
git diff HEAD
git commit count_lines.py   # add extended message with text editor
git log 
git log --oneline
git show HEAD~1

# IGNORE FILES AND DIRECTORIES

mkdir data
ls
touch data/a.dat data/b.dat big-data.zip
ls -R
git status 
git status -u
touch .gitignore
ls -a
nano .gitignore
cat .gitignore 
git status 
git add .gitignore 
git commit -m "Add .gitignore" .gitignore 
git log --oneline
git status 
git status --ignored

# WORKING WITH REMOTES: PUSH AND PULL

# in the browser: create new repository 2311-SCW-conflict.git
git branch
git branch -M master main
git branch
git status 
git remote add origin git@github.com:username/2311-SCW-conflict.git
git remote
git remote -v
git push -u origin main
git log --oneline
git pull origin main

# CONFLICTS

nano count_lines.py 
git add count_lines.py 
git commit -m "Add name and surname" count_lines.py 
git log --oneline
git status 
git push origin main  # local and remote repositories are aligned
# in the browser: change name format to Surname, Name and commit
nano count_lines.py  # in the terminal, change format to N. Surname
git diff
git add count_lines.py 
git commit -m "Abbreviate first name" count_lines.py 
git log --oneline
git push -u origin main  # expected failure
git pull origin main # another failure: there are conflicting changes
nano count_lines.py   # fix the conflict manually
git status  # take suggestions
git add count_lines.py # mark the conflict as resolved 
git status 
git commit  # close and merge
git log --oneline
git push origin main  # pass
# in the browser: the remote repository has accepted the changes
