dir.create("data")
dir.create("data")
dir.create("data_output")
dir.create("fig_output")
# Introduction to R
3 + 5
3 + 5
12 / 7
pi
area_hectares <- 1.0
area_hectares
area_hectares
area_hectares <- 2.0
area_hectares
1.0 -> area_hectares
1.0 -> area_hectares  # possible but uncommon
(area_hectares <- 1.0)
2.47 * area_hectares
(area_acres <- area_hectares * 2.47)
area_hectares <- 50
(area_acres <- area_hectares * 2.47)
source("~/ownCloud/tudelft/carpentries/workshops/2023-10-12_DC-ldev/workshop_notes/data-carpentry/script.R", echo=TRUE)
# exercise compute area of a rectangle
r_length <- 2
r_width <- 5
r_area <- r_length * r_width
r_area
# functions
round()
round(pi)
pi
round_pi <- round(pi)
(round_pi <- round(pi))
round
rounded_number <- round(45732.2876743)
(round_pi <- round(pi))
round
round
round()
round(x=pi)
(round(x=pi, digits=2))
args(round)
help(round)
round(digits=3, x=pi)
hh_members <- c(3, 7, 10, 6)
hh_members
length(hh_mebers)
length(hh_members)
respondent_wall_type <- c("muddaub", "burntbricks", "sunbricks")
respondent_wall_type
length(respondent_wall_type)
class(hh_members)
typeof(hh_members)
class(respondent_wall_type)
typeof(respondent_wall_type)
possession <- c("bicyle", "radio", "television")
possession
possession <- c( possession, "mobile phone")
possession
num_char <- c(1, 2, 3, "a")
num_char
class(num_char)
num_char[1]
num_char[4]
num_char[c(2,3)]
possesion[c(2,3)]
possession[c(2,3)]
possession[c(2,3,1,3,4,2,4,1,2,4)]
hh_members
hh_members[c(TRUE, FALSE, TRUE, TRUE)]
3 > 5
5 > 3
5 == 3
5 != 3
hh_members
hh_members == 5
hh_members == 7
hh_members[hh_members == 7]
hh_members[hh_members < 7]
NA
class(NA)
NA + NA
NA + 3
rooms <- c(2, 1, 1, NA, 7)
rooms
mean(rooms)
mean
args(mean)
args(max)
max(rooms)
args(max)
max(rooms, na.rm=TRUE)
is.na(NA)
is.na(4)
is.na(rooms)
rooms[!is.na(rooms)]
rooms_cleaned <- rooms[!is.na(rooms)]
mean(rooms_cleaned)
library(here)
dir.create("scripts")
download.file(
"https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv",
"data/SAFI_clean.csv", mode = "wb"
)
download.file(
"https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv",
"data/SAFI_clean.csv", mode = "wb"
)
library(here)
library(tidyverse)
# loading data
read_csv("data/SAFI_clean.csv")
getwd()
# loading data
read_csv(here("data/SAFI_clean.csv"))
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = NULL)
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = "NULL")
interviews
view(interviews)
head(interviews)
head(interviews, n = 20)
class(interviews)
dir.create("data")
dir.create("data_output")
dir.create("fig_output")
library(tidyverse)
library(here)
# Assign data to the object
interviews <- read_csv(here("data", "SAFI_clean.csv"), na = "NULL")
## load the tidyverse
library(tidyverse)
library(here)
# Assign data to the object
interviews <- read_csv(here("data", "SAFI_clean.csv"), na = "NULL")
select(interviews, village, no_membrs, months_lack_food)
interviews[c("village", "no_membrs", "months_lack_food")]
# select a series of columns placed next to eachother
select(interviews, village:respondent_wall_type)
# Subset by rows
filter(interviews, village == "Chirodzo")
filter(interviews, village == "Chirodzo" &
rooms > 1 &
no_meals > 2 )
filter(interviews, village == "Chirodzo" |
rooms > 1 |
no_meals > 2
)
interviews2 <- filter(interviews, village == "Chirodzo")
interviews_ch <- select(interviews2, village:respondent_wall_type)
interviews_ch <- select(filter(interviews, village == "Chirodzo"),
village:repsondent_wall_type)
interviews_ch <- select(filter(interviews, village == "Chirodzo"),
village:respondent_wall_type)
interviews_ch <- interviews %>%
filter(village == "Chirodzo") %>%
select(village:respondent_wall_type)
interviews %>%
filter(memb_assoc == "yes") %>%
select(affect_conflicts, liv_count, no_meals)
interviews %>%
mutate(people_per_room = no_membrs/rooms)
interviews %>%
mutate(people_per_room = no_membrs/rooms) %>%
view()
interviews %>%
filter(!is.na(memb_assoc)) %>%
mutate(people_per_room = no_membrs/rooms)
interviews %>%
filter(!is.na(memb_assoc)) %>%
mutate(people_per_room = no_membrs/rooms) %>%view()
interviews %>%
mutate(total_meals = no_membrs * no_meals) %>%
filter(total_meals > 20) %>%
select(village, total_meals)
interviews  %>%
group_by(village) %>%
summarize(mean_no_membrs = mean(no_memrs)  )
interviews  %>%
group_by(village) %>%
summarize(mean_no_membrs = mean(no_membrs)  )
# avarage household size by village and association membership
interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_membrs = mean(no_membrs))
# avarage household size by village and association membership
interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_membrs = mean(no_membrs))%>%
filter(!is.na(memb_assoc))
# multiple calculations
interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_mebrs = mean(no_membrs),
min_membrs = min(no_membrs))
interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_mebrs = mean(no_membrs),
min_membrs = min(no_membrs)) %>%
filter(!is.na(memb_assoc))
# interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_mebrs = mean(no_membrs),
min_membrs = min(no_membrs)) %>%
filter(!is.na(memb_assoc))  %>%
arrange(desc(min_membrs))
interviews %>%
group_by(village, memb_assoc) %>%
summarize(mean_no_mebrs = mean(no_membrs),
min_membrs = min(no_membrs)) %>%
filter(!is.na(memb_assoc))  %>%
arrange(desc(min_membrs))
?n
interviews %>%
group_by(village) %>%
summarize(
mean_no_membrs = mean(no_membrs),
min_no_membrs = min(no_membrs),
max_no_membrs = max(no_membrs),
n = n()
)
interviews_wide <- interviews %>%
mutate(wall_type_logical = TRUE) %>%
pivot_wider(names_from = respondent_wall_type,
values_from = wall_type_logical,
values_fill = FALSE)
interviews_wide
View(interviews_wide)
interviews_wide <- interviews %>%
mutate(wall_type_logical = TRUE) %>%
pivot_wider(names_from = respondent_wall_type,
values_from = wall_type_logical,
values_fill = FALSE)
View(interviews_wide)
interviews_long <- interviews_wide %>%
pivot_longer(cols = c(muddaub, cement, sunbricks, burntbricks),
names_to = "wall_type",
values_to = "wall_type_l")
View(interviews_long)
524/131
