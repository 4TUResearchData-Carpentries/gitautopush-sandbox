dir.create("data")
dir.create("data")
dir.create("data_output")
dir.create("fig_output")
# Introduction to R
3 + 5
3 + 5
12 / 7
pi
area_hectares <- 1.0
area_hectares
area_hectares
area_hectares <- 2.0
area_hectares
1.0 -> area_hectares
1.0 -> area_hectares  # possible but uncommon
(area_hectares <- 1.0)
2.47 * area_hectares
(area_acres <- area_hectares * 2.47)
area_hectares <- 50
(area_acres <- area_hectares * 2.47)
source("~/ownCloud/tudelft/carpentries/workshops/2023-10-12_DC-ldev/workshop_notes/data-carpentry/script.R", echo=TRUE)
# exercise compute area of a rectangle
r_length <- 2
r_width <- 5
r_area <- r_length * r_width
r_area
# functions
round()
round(pi)
pi
round_pi <- round(pi)
(round_pi <- round(pi))
round
rounded_number <- round(45732.2876743)
(round_pi <- round(pi))
round
round
round()
round(x=pi)
(round(x=pi, digits=2))
args(round)
help(round)
round(digits=3, x=pi)
hh_members <- c(3, 7, 10, 6)
hh_members
length(hh_mebers)
length(hh_members)
respondent_wall_type <- c("muddaub", "burntbricks", "sunbricks")
respondent_wall_type
length(respondent_wall_type)
class(hh_members)
typeof(hh_members)
class(respondent_wall_type)
typeof(respondent_wall_type)
possession <- c("bicyle", "radio", "television")
possession
possession <- c( possession, "mobile phone")
possession
num_char <- c(1, 2, 3, "a")
num_char
class(num_char)
num_char[1]
num_char[4]
num_char[c(2,3)]
possesion[c(2,3)]
possession[c(2,3)]
possession[c(2,3,1,3,4,2,4,1,2,4)]
hh_members
hh_members[c(TRUE, FALSE, TRUE, TRUE)]
3 > 5
5 > 3
5 == 3
5 != 3
hh_members
hh_members == 5
hh_members == 7
hh_members[hh_members == 7]
hh_members[hh_members < 7]
NA
class(NA)
NA + NA
NA + 3
rooms <- c(2, 1, 1, NA, 7)
rooms
mean(rooms)
mean
args(mean)
args(max)
max(rooms)
args(max)
max(rooms, na.rm=TRUE)
is.na(NA)
is.na(4)
is.na(rooms)
rooms[!is.na(rooms)]
rooms_cleaned <- rooms[!is.na(rooms)]
mean(rooms_cleaned)
library(here)
dir.create("scripts")
download.file(
"https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv",
"data/SAFI_clean.csv", mode = "wb"
)
download.file(
"https://raw.githubusercontent.com/datacarpentry/r-socialsci/main/episodes/data/SAFI_clean.csv",
"data/SAFI_clean.csv", mode = "wb"
)
library(here)
library(tidyverse)
# loading data
read_csv("data/SAFI_clean.csv")
getwd()
# loading data
read_csv(here("data/SAFI_clean.csv"))
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = NULL)
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = "NULL")
interviews
view(interviews)
head(interviews)
head(interviews, n = 20)
class(interviews)
head(interviews, n = 20)
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = "NULL")
# load packages
library(here)
library(tidyverse)
# loading data
interviews <- read_csv(here("data/SAFI_clean.csv"), na = "NULL")
view(interviews)
head(interviews, n = 20)
class(interviews)
source("~/ownCloud/tudelft/carpentries/workshops/2023-10-12_DC-ldev/workshop_notes/data-carpentry/scripts/start-data.R", echo=TRUE)
dim(interviews)
nrow(interviews)
ncol(interviews)
tail(interviews)
names(interviews)
str(interviews)
summary(interviews)
?tail
str(interviews)
summary(interviews)
interviews[1,1]
interviews[1,6]
interviews[[1]]
interviews[[2]]
interviews[c(1,2,3),5]
interviews[1:3, 5]
1:100
interviews[2,]
interviews[1:6,]
interviews[,1:3]
View(interviews)
interviews[,!2]
interviews[,-2]
interviews[,!c(2)]
interviews[-c(7:131), ]
mean(interviews[[1]])
mean(interviews[,1])
interviews["village"]
interviews[,"village"]
interviews[["village"]]
interviews$years_liv
interviews$village
interviews$"village"
interviews_100 <- interviews[100,]
nrow(interviews)
interviews[131,]
interviews[nrow(interviews),]
respondent_floor_type <- factor(
c("earth", "cement", "cement", "earth"))
respondent_floor_type
respondent_floor_type <- factor(
respondent_floor_type, levels = c("earth", "cement")
)
respondent_floor_type
levels(respondent_floor_type)
as.character(respondent_floor_type)
year_fct <- factor(c(1990, 1983, 1977, 1998, 1990))
year_fct
as.numeric(year_fct)
as.character(year_fct)
as.numeric(as.character(year_fct))
as.numeric(levels(year_fct))[year_fct] # preferred
